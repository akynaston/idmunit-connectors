/*
 * IdMUnit - Automated Testing Framework for Identity Management Solutions
 * Copyright (c) 2005-2018 TriVir, LLC
 *
 * This program is licensed under the terms of the GNU General Public License
 * Version 2 (the "License") as published by the Free Software Foundation, and
 * the TriVir Licensing Policies (the "License Policies").  A copy of the License
 * and the Policies were distributed with this program.
 *
 * The License is available at:
 * http://www.gnu.org/copyleft/gpl.html
 *
 * The Policies are available at:
 * http://www.idmunit.org/licensing/index.html
 *
 * Unless required by applicable law or agreed to in writing, this program is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, either express or implied.  See the License and the Policies
 * for specific language governing the use of this program.
 *
 * www.TriVir.com
 * TriVir LLC
 * 13890 Braddock Road
 * Suite 310
 * Centreville, Virginia 20121
 *
 */

package com.trivir.idmunit.connector;

import junit.framework.TestCase;
import org.idmunit.IdMUnitException;
import org.idmunit.connector.ConnectionConfigData;

import java.util.*;

/**
 * Implements an IdMUnit connector for SCPConnector that simulates iDoc format transactions originating from SCPConnector to the SCPConnector IDM Driver
 *
 * @author Brent Kynaston, Software Engineer, TriVir LLC
 * @version %I%, %G%
 * @see org.idmunit.connector.Connector
 */
public class SCPTests extends TestCase {
    private SCPConnector scpConnectorInstance;


    private static Collection<String> singleValue(String value) {
        List<String> values = new ArrayList<String>();
        values.add(value);
        return values;
    }

    protected void setUp() throws Exception {
        super.setUp();
        scpConnectorInstance = new SCPConnector();
        ConnectionConfigData configurationData = new ConnectionConfigData("SCP", "com.trivir.idmunit.connector.SCPConnector");
        configurationData.setParam(SCPConnector.ENABLE_SCP, "false");
        configurationData.setParam(SCPConnector.SCP_PROFILE, "trivirvm");
        configurationData.setParam(SCPConnector.WRITE_PATH, "/vm/trivirvm/VMs/CensusVMs");
        configurationData.setParam(SCPConnector.DELIM, ",");
        configurationData.setParam(SCPConnector.DTF_FILE_EXTENSION, "csv");
        configurationData.setParam(SCPConnector.LOCAL_CACHE, "c:\\idmunit\\dtfdata\\");
        configurationData.setParam(SCPConnector.WIN_SCP_EXE_PATH, "C:\\Program Files\\WinSCP3\\WinSCP3.exe");
        scpConnectorInstance.setup(configurationData.getParams());
    }

    protected void tearDown() throws Exception {
        super.tearDown();
        scpConnectorInstance.tearDown();
    }

    public void testCreateGoodDTFFileGeneration() throws IdMUnitException {
        System.out.println("\n\n\n\n\n####### Testing successful DTF file generation #######\n\n\n\n");
        Map<String, Collection<String>> data = new TreeMap<String, Collection<String>>();
        data.put("FIELD1", singleValue("testval1"));
        data.put("FIELD2", singleValue("testval2"));
        data.put("FIELD3", singleValue("testval3"));
        data.put("FIELD4", singleValue("testval4"));
        data.put("FIELD5", singleValue("testval5"));
        data.put("FIELD6", singleValue("testval6"));
        try {
            String generatedDTFData = scpConnectorInstance.opAddObjectIMPL(data);
            if (generatedDTFData == null || generatedDTFData.length() < 1) {
                fail("Failed to generate DTF data");
            } else if (!"testval1,testval2,testval3,testval4,testval5,testval6,".equalsIgnoreCase(generatedDTFData)) {
                fail("Resulting data contained unexpected values or possibly bad ordering");
            } else {
                System.out.println("Resulting DTF data generated by the test: " + generatedDTFData);
            }
        } catch (IdMUnitException e) {
            e.printStackTrace();
            fail("Should not have thrown exception");
        }
    }
/*    public void testCreateBadIDocTemplateFilePath() throws IdMUnitException {
        Map<String, Collection<String>> data = new HashMap<String, Collection<String>>();
        data.put("IDocTemplate", singleValue("C:/work/McCormick/svn/test/IDocTemplates/NONExistantFile.idoc"));
        data.put("dn", singleValue("ORGROLID=60005100"));
        try {
            scpConnectorInstance.opAddObject(data);
            fail("Should have thrown exception");
        } catch (IdMUnitException e) {
            assertEquals("Failed to process the specified SCPConnector template file [C:/work/McCormick/svn/test/IDocTemplates/NONExistantFile.idoc] " +
                    "with error message [C:\\work\\McCormick\\svn\\test\\IDocTemplates\\NONExistantFile.idoc (The system cannot find the file specified)]", e.getMessage());
        }
    }

    public void testReplaceAssociationKeyWithObjectGUID() throws IdMUnitException {
        List<String> dataList = new LinkedList<String>();
        dataList.add("test1 REPLACEME String");
        dataList.add("REPLACEMEtest2 REPLACEME StringREPLACEME");
        dataList.add("REPLACEMEtest3 REPLACEME String");
        dataList.add("test4 REPLACEME StringREPLACEME");

        scpConnectorInstance.replaceAssociationKeyWithObjectGUID(dataList, "REPLACEME=NewValue");
        for(int ctr=0;ctr<dataList.size();++ctr) {
            assertFalse(dataList.get(ctr).contains("REPLACEME"));
        }
    }

    public void testLoadFileData() throws IdMUnitException {
        List<String> fileData = scpConnectorInstance.loadFileData(m_sapTemplateFile);
        if(fileData.size()<1) {
            fail("No data read from specified template file.");
        }
    }

    public void testWriteFileData() throws IdMUnitException {
        List<String> fileData = scpConnectorInstance.loadFileData(m_sapTemplateFile);
        if(fileData.size()<1) {
            fail("No data read from specified template file.");
        }

           SCPConnector.writeFile(m_sapIDocCacheDirectory+"JUnitTestOutput1.idoc", fileData);

        //Validate the freshly written data
        List<String> idocData= scpConnectorInstance.loadFileData(m_sapTemplateFile);
        if(idocData.size()<1) {
            fail("No data read from generated IDoc template file.");
        }
    }

    public void testFieldRightPadding() throws IdMUnitException {
        System.out.println("\n\nPadding: " + SCPConnector.padRight("test1", 20)+"#");
        System.out.println("\n\nPadding: " + SCPConnector.padRight("test1", 7)+"#");
        System.out.println("\n\nPadding: " + SCPConnector.padRight("test1",3)+"#");
        System.out.println("\n\nPadding: " + SCPConnector.padRight("test1", 10)+"#");
        if(!(SCPConnector.padRight("test1", 20)+"#").equalsIgnoreCase("test1               #")) fail("Right padding to 20 chars did not work.");
        if(!(SCPConnector.padRight("test2", 7)+"#").equalsIgnoreCase("test2  #")) fail("Right padding to 7 chars did not work.");
        if(!(SCPConnector.padRight("test3", 3)+"#").equalsIgnoreCase("test3#")) fail("Right padding to 3 chars did not work.");
        if(!(SCPConnector.padRight("test4", 10)+"#").equalsIgnoreCase("test4     #")) fail("Right padding to 10 chars did not work.");
    }

    public void testComposeIDocFileName() throws IdMUnitException {
        Map<String, Collection<String>> data = new HashMap<String, Collection<String>>();
        data.put("IDocTemplate", singleValue(m_sapTemplateFile));
        data.put("dn", singleValue("ORGROLID=60005100"));
        String expectedFileNamePrefix = "O_030_000000000020";
        String expectedFileNameSuffix = ".idmunit";
        String actualFileName = scpConnectorInstance.composeDTFFileName();
        if((actualFileName.indexOf(expectedFileNamePrefix)==-1)) {
            fail("The file name prefix expected was [" + expectedFileNamePrefix + "] but this was the name value [" + scpConnectorInstance.composeDTFFileName()+"]");
        }
        if((actualFileName.indexOf(expectedFileNameSuffix)==-1)) {
            fail("The file name suffix expected was [" + expectedFileNameSuffix+ "] but this was the name value [" + scpConnectorInstance.composeDTFFileName()+"]");
        }
    }
*/
}
